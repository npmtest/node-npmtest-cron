{"/home/travis/build/npmtest/node-npmtest-cron/test.js":"/* istanbul instrument in package npmtest_cron */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cron/lib.npmtest_cron.js":"/* istanbul instrument in package npmtest_cron */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cron = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cron = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cron/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cron && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cron */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cron\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cron.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_cron.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cron.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_cron.__dirname +\n                    '/lib.npmtest_cron.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cron/cron/lib/cron.js":"(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(['moment-timezone'], factory);\n\t} else if (typeof exports === 'object') {\n\t\tmodule.exports = factory(require('moment-timezone'), require('child_process'));\n\t} else {\n\t\troot.Cron = factory(root.moment);\n\t}\n}(this, function (moment, child_process) {\n\nvar exports = {},\n\t\ttimeUnits = ['second', 'minute', 'hour', 'dayOfMonth', 'month', 'dayOfWeek'],\n\t\tspawn = child_process && child_process.spawn;\n\nfunction CronTime(source, zone) {\n\tthis.source = source;\n\n\tif (zone) {\n\t\tif (moment.tz.names().indexOf(zone) === -1) {\n\t\t\tthrow new Error('Invalid timezone.');\n\t\t}\n\n\t\tthis.zone = zone;\n\t}\n\n\tvar that = this;\n\ttimeUnits.map(function(timeUnit){\n\t\tthat[timeUnit] = {};\n\t});\n\n\tif (this.source instanceof Date) {\n\t\tthis.source = moment(this.source);\n\t\tthis.realDate = true;\n\t} else {\n\t\tthis._parse();\n\t\tthis._verifyParse();\n\t}\n}\n\nCronTime.constraints = [\n\t\t[0, 59],\n\t\t[0, 59],\n\t\t[0, 23],\n\t\t[1, 31],\n\t\t[0, 11],\n\t\t[0, 6]\n\t];\n\tCronTime.monthConstraints = [\n\t\t31,\n\t\t29, //support leap year...not perfect\n\t\t31,\n\t\t30,\n\t\t31,\n\t\t30,\n\t\t31,\n\t\t31,\n\t\t30,\n\t\t31,\n\t\t30,\n\t\t31\n\t];\n\tCronTime.parseDefaults = ['0', '*', '*', '*', '*', '*'];\n\tCronTime.aliases = {\n\t\tjan: 0,\n\t\tfeb: 1,\n\t\tmar: 2,\n\t\tapr: 3,\n\t\tmay: 4,\n\t\tjun: 5,\n\t\tjul: 6,\n\t\taug: 7,\n\t\tsep: 8,\n\t\toct: 9,\n\t\tnov: 10,\n\t\tdec: 11,\n\t\tsun: 0,\n\t\tmon: 1,\n\t\ttue: 2,\n\t\twed: 3,\n\t\tthu: 4,\n\t\tfri: 5,\n\t\tsat: 6\n\t};\n\n\nCronTime.prototype = {\n\t_verifyParse: function() {\n\t\tvar months = Object.keys(this.month);\n\t\tfor (var i = 0; i < months.length; i++) {\n\t\t\tvar m = months[i];\n\t\t\tvar con = CronTime.monthConstraints[parseInt(m, 10)];\n\t\t\tvar ok = false;\n\t\t\tvar dsom = Object.keys(this.dayOfMonth);\n\t\t\tfor (var j = 0; j < dsom.length; j++) {\n\t\t\t\tvar dom = dsom[j];\n\t\t\t\tif (dom <= con)\n\t\t\t\t\tok = true;\n\t\t\t}\n\n\t\t\tif (!ok) {\n\t\t\t\tconsole.warn('Month \\'' + m + '\\' is limited to \\'' + con + '\\' days.');\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * calculates the next send time\n\t */\n\tsendAt: function(i) {\n\t\tvar date = this.realDate ? this.source : moment();\n\t\t// Set the timezone if given (http://momentjs.com/timezone/docs/#/using-timezones/parsing-in-zone/)\n\t\tif (this.zone)\n\t\t\tdate = date.tz(this.zone);\n\n\t\tif (this.realDate)\n\t\t\treturn date;\n\n\t\t//add 1 second so next time isn't now (can cause timeout to be 0 or negative number)\n\t\tvar now = new Date();\n\t\tvar targetSecond = date.seconds();\n\t\tvar diff = Math.abs(targetSecond - now.getSeconds())\n\t\t// there was a problem when `date` is 1424777177999 and `now` is 1424777178000\n\t\t// 1 ms diff but this is another second...\n\t\tif ( diff == 0 || (diff == 1 && now.getMilliseconds() <= date.milliseconds() ) ) {\n\t\t\t//console.log('add 1 second?');\n\t\t\tdate = date.add(1, 's');\n\t\t}\n\n\t\t//If the i argument is not given, return the next send time\n\t\tif(isNaN(i) || i < 0){\n\t\t\tdate = this._getNextDateFrom(date);\n\t\t\treturn date;\n\t\t}\n\t\t//Else return the next i send times\n\t\telse{\n\t\t\tvar dates = [];\n\t\t\tfor(;i>0;i--){\n\t\t\t\tdate = this._getNextDateFrom(date);\n\t\t\t\tdates.push(moment(date));\n\t\t\t\tif(i>1) date.add(1,'s');\n\t\t\t}\n\t\t\treturn dates;\n\t\t}\n\t},\n\n\t/**\n\t * Get the number of milliseconds in the future at which to fire our callbacks.\n\t */\n\tgetTimeout: function() {\n\t\treturn Math.max(-1, this.sendAt() - moment());\n\t},\n\n\t/**\n\t * writes out a cron string\n\t */\n\ttoString: function() {\n\t\treturn this.toJSON().join(' ');\n\t},\n\n\t/**\n\t * Json representation of the parsed cron syntax.\n\t */\n\ttoJSON: function() {\n\t\tvar self = this;\n\t\treturn timeUnits.map(function(timeName){\n\t\t\treturn self._wcOrAll(timeName);\n\t\t});\n\t},\n\n\t/**\n\t * get next date that matches parsed cron time\n\t */\n\t_getNextDateFrom: function(start) {\n\t\tvar date = moment(start);\n\t\tif (date.toString() == 'Invalid date') {\n\t\t\tconsole.log('ERROR: You specified an invalid date.');\n\t\t\treturn date;\n\t\t}\n\t\tif (this.realDate && start < new Date())\n\t\t\tconsole.log('WARNING: Date in past. Will never be fired.');\n\t\tif (this.realDate) return date;\n\n\t\t//sanity check\n\t\twhile (true) {\n\t\t\tvar diff = date - start,\n\t\t\t\torigDate = new Date(date);\n\n\t\t\tif (!(date.month() in this.month)) {\n\t\t\t\tdate.add(1, 'M');\n\t\t\t\tdate.date(1);\n\t\t\t\tdate.hours(0);\n\t\t\t\tdate.minutes(0);\n\t\t\t\tdate.seconds(0);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!(date.date() in this.dayOfMonth)) {\n\t\t\t\tdate.add(1, 'd');\n\t\t\t\tdate.hours(0);\n\t\t\t\tdate.minutes(0);\n\t\t\t\tdate.seconds(0);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!(date.day() in this.dayOfWeek)) {\n\t\t\t\tdate.add(1, 'd');\n\t\t\t\tdate.hours(0);\n\t\t\t\tdate.minutes(0);\n\t\t\t\tdate.seconds(0);\n\t\t\t\tif (date <= origDate) {\n\t\t\t\t\tdate = this._findDST(origDate);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!(date.hours() in this.hour)) {\n\t\t\t\torigDate = moment(date);\n\t\t\t\tdate.hours(date.hours() == 23 && diff > 86400000 ? 0 : date.hours() + 1);\n\t\t\t\tdate.minutes(0);\n\t\t\t\tdate.seconds(0);\n\t\t\t\tif (date <= origDate) {\n\t\t\t\t\tdate = this._findDST(origDate);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!(date.minutes() in this.minute)) {\n\t\t\t\torigDate = moment(date);\n\t\t\t\tdate.minutes(date.minutes() == 59 && diff > 60 * 60 * 1000 ? 0 : date.minutes() + 1);\n\t\t\t\tdate.seconds(0);\n\t\t\t\tif (date <= origDate) {\n\t\t\t\t\tdate = this._findDST(origDate);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!(date.seconds() in this.second)) {\n\t\t\t\torigDate = moment(date);\n\t\t\t\tdate.seconds(date.seconds() == 59 && diff > 60 * 1000 ? 0 : date.seconds() + 1);\n\t\t\t\tif (date <= origDate) {\n\t\t\t\t\tdate = this._findDST(origDate);\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\treturn date;\n\t},\n\n\t/**\n\t * get next date that is a valid DST date\n\t */\n\t_findDST: function(date) {\n\t\tvar newDate = moment(date);\n\t\twhile (newDate <= date)\n\t\t\tnewDate.add(1, 's');\n\n\t\treturn newDate;\n\t},\n\n\t/**\n\t * wildcard, or all params in array (for to string)\n\t */\n\t_wcOrAll: function(type) {\n\t\tif (this._hasAll(type)) return '*';\n\n\t\tvar all = [];\n\t\tfor (var time in this[type]) {\n\t\t\tall.push(time);\n\t\t}\n\n\t\treturn all.join(',');\n\t},\n\n\t_hasAll: function(type) {\n\t\tvar constrain = CronTime.constraints[timeUnits.indexOf(type)];\n\n\t\tfor (var i = constrain[0], n = constrain[1]; i < n; i++) {\n\t\t\tif (!(i in this[type])) return false;\n\t\t}\n\n\t\treturn true;\n\t},\n\n\n\t_parse: function() {\n\t\tvar aliases = CronTime.aliases,\n\t\tsource = this.source.replace(/[a-z]{1,3}/ig, function(alias) {\n\t\t\talias = alias.toLowerCase();\n\n\t\t\tif (alias in aliases) {\n\t\t\t\treturn aliases[alias];\n\t\t\t}\n\n\t\t\tthrow new Error('Unknown alias: ' + alias);\n\t\t}),\n\t\tsplit = source.replace(/^\\s\\s*|\\s\\s*$/g, '').split(/\\s+/),\n\t\tcur, i = 0,\n\t\tlen = timeUnits.length;\n\n\t\tfor (; i < timeUnits.length; i++) {\n\t\t\t// If the split source string doesn't contain all digits,\n\t\t\t// assume defaults for first n missing digits.\n\t\t\t// This adds support for 5-digit standard cron syntax\n\t\t\tcur = split[i - (len - split.length)] || CronTime.parseDefaults[i];\n\t\t\tthis._parseField(cur, timeUnits[i], CronTime.constraints[i]);\n\t\t}\n\t},\n\n\t_parseField: function(field, type, constraints) {\n\t\tvar rangePattern = /^(\\d+)(?:-(\\d+))?(?:\\/(\\d+))?$/g,\n\t\ttypeObj = this[type],\n\t\tpointer,\n\t\tlow = constraints[0],\n\t\thigh = constraints[1];\n\n\t\t// * is a shortcut to [lower-upper] range\n\t\tfield = field.replace(/\\*/g, low + '-' + high);\n\n\t\t//commas separate information, so split based on those\n\t\tvar allRanges = field.split(',');\n\n\t\tfor (var i = 0; i < allRanges.length; i++) {\n\t\t\tif (allRanges[i].match(rangePattern)) {\n\t\t\t\tallRanges[i].replace(rangePattern, function($0, lower, upper, step) {\n\t\t\t\t\tstep = parseInt(step) || 1;\n\t\t\t\t\t// Positive integer higher than constraints[0]\n\t\t\t\t\tlower = Math.min(Math.max(low, ~~Math.abs(lower)), high);\n\n\t\t\t\t\t// Positive integer lower than constraints[1]\n\t\t\t\t\tupper = upper ? Math.min(high, ~~Math.abs(upper)) : lower;\n\n\t\t\t\t\t// Count from the lower barrier to the upper\n\t\t\t\t\tpointer = lower;\n\n\t\t\t\t\tdo {\n\t\t\t\t\t\ttypeObj[pointer] = true\n\t\t\t\t\t\tpointer += step;\n\t\t\t\t\t} while (pointer <= upper);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthrow new Error('Field (' + field + ') cannot be parsed');\n\t\t\t}\n\t\t}\n\t}\n};\n\nfunction command2function(cmd) {\n\tvar command, args;\n\tswitch (typeof cmd) {\n\t\tcase 'string':\n\t\t\targs = cmd.split(' ');\n\t\t\tcommand = args.shift();\n\n\t\t\tcmd = spawn.bind(undefined, command, args);\n\t\t\tbreak;\n\t\tcase 'object':\n\t\t\tcommand = cmd && cmd.command;\n\t\t\tif (command) {\n\t\t\t\targs = cmd.args;\n\t\t\t\tvar options = cmd.options;\n\n\t\t\t\tcmd = spawn.bind(undefined, command, args, options);\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\treturn cmd\n}\n\nfunction CronJob(cronTime, onTick, onComplete, startNow, timeZone, context, runOnInit) {\n\tvar _cronTime = cronTime;\n\tif (typeof cronTime != 'string' && arguments.length == 1) {\n\t\t//crontime is an object...\n\t\tonTick = cronTime.onTick;\n\t\tonComplete = cronTime.onComplete;\n\t\tcontext = cronTime.context;\n\t\tstartNow = cronTime.start || cronTime.startNow || cronTime.startJob;\n\t\ttimeZone = cronTime.timeZone;\n\t\trunOnInit = cronTime.runOnInit;\n\t\t_cronTime = cronTime.cronTime;\n\t}\n\n\tthis.context = (context || this);\n\tthis._callbacks = [];\n\tthis.onComplete = command2function(onComplete);\n\tthis.cronTime = new CronTime(_cronTime, timeZone);\n\n\taddCallback.call(this, command2function(onTick));\n\n\tif (runOnInit) fireOnTick.call(this);\n\tif (startNow) start.call(this);\n\n\treturn this;\n}\n\nvar addCallback = function(callback) {\n\tif (typeof callback == 'function') this._callbacks.push(callback);\n}\nCronJob.prototype.addCallback = addCallback;\n\nCronJob.prototype.setTime = function(time) {\n\tif (!(time instanceof CronTime)) throw new Error('\\'time\\' must be an instance of CronTime.');\n\tthis.stop();\n\tthis.cronTime = time;\n}\n\nCronJob.prototype.nextDate = function() {\n\treturn this.cronTime.sendAt();\n}\n\nvar fireOnTick = function() {\n\tfor (var i = (this._callbacks.length - 1); i >= 0; i--)\n\t\tthis._callbacks[i].call(this.context, this.onComplete);\n}\nCronJob.prototype.fireOnTick = fireOnTick;\n\nCronJob.prototype.nextDates = function(i) {\n\treturn this.cronTime.sendAt(i);\n}\n\nvar start = function() {\n\tif (this.running) return;\n\n\tvar MAXDELAY = 2147483647; // The maximum number of milliseconds setTimeout will wait.\n\tvar self = this;\n\tvar timeout = this.cronTime.getTimeout();\n\tvar remaining = 0;\n\tvar startTime;\n\n\tif (this.cronTime.realDate) this.runOnce = true;\n\n\tfunction _setTimeout(timeout) {\n\t\tstartTime = Date.now();\n\t\tself._timeout = setTimeout(callbackWrapper, timeout);\n\t}\n\n\t// The callback wrapper checks if it needs to sleep another period or not\n\t// and does the real callback logic when it's time.\n\n\tfunction callbackWrapper() {\n\t\tvar diff = startTime + timeout - Date.now();\n\n\t\tif (diff > 0) {\n\t\t\tvar newTimeout = self.cronTime.getTimeout();\n\n\t\t\tif (newTimeout > diff) {\n\t\t\t\tnewTimeout = diff;\n\t\t\t}\n\n\t\t\tremaining += newTimeout;\n\t\t}\n\n\t\t// If there is sleep time remaining, calculate how long and go to sleep\n\t\t// again. This processing might make us miss the deadline by a few ms\n\t\t// times the number of sleep sessions. Given a MAXDELAY of almost a\n\t\t// month, this should be no issue.\n\n\t\tself.lastExecution = new Date();\n\t\tif (remaining) {\n\t\t\tif (remaining > MAXDELAY) {\n\t\t\t\tremaining -= MAXDELAY;\n\t\t\t\ttimeout = MAXDELAY;\n\t\t\t} else {\n\t\t\t\ttimeout = remaining;\n\t\t\t\tremaining = 0;\n\t\t\t}\n\n\t\t\t_setTimeout(timeout);\n\t\t} else {\n\n\t\t\t// We have arrived at the correct point in time.\n\n\t\t\tself.running = false;\n\n\t\t\t//start before calling back so the callbacks have the ability to stop the cron job\n\t\t\tif (!(self.runOnce)) self.start();\n\n\t\t\tself.fireOnTick();\n\t\t\t//for (var i = (self._callbacks.length - 1); i >= 0; i--)\n\t\t\t\t//self._callbacks[i].call(self.context, self.onComplete);\n\t\t}\n\t}\n\n\tif (timeout >= 0) {\n\t\tthis.running = true;\n\n\t\t// Don't try to sleep more than MAXDELAY ms at a time.\n\n\t\tif (timeout > MAXDELAY) {\n\t\t\tremaining = timeout - MAXDELAY;\n\t\t\ttimeout = MAXDELAY;\n\t\t}\n\n\t\t_setTimeout(timeout);\n\t} else {\n\t\tthis.stop();\n\t}\n}\n\nCronJob.prototype.start = start;\n\nCronJob.prototype.lastDate = function(){\n\treturn this.lastExecution;\n};\n\n/**\n * Stop the cronjob.\n */\nCronJob.prototype.stop = function() {\n\tif (this._timeout)\n\t\tclearTimeout(this._timeout);\n\tthis.running = false;\n\tif (typeof this.onComplete == 'function') this.onComplete();\n}\n\nexports.job = function(cronTime, onTick, onComplete) {\n\treturn new CronJob(cronTime, onTick, onComplete);\n}\n\nexports.time = function(cronTime, timeZone) {\n\treturn new CronTime(cronTime, timeZone);\n}\n\nexports.sendAt = function(cronTime) {\n\treturn exports.time(cronTime).sendAt();\n}\n\nexports.timeout = function(cronTime) {\n\treturn exports.time(cronTime).getTimeout();\n}\n\nexports.CronJob = CronJob;\nexports.CronTime = CronTime;\n\nreturn exports;\n\n}));\n"}